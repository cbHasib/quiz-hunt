[{
    "id": "f1a15e80-d9b1-404f-ac2a-dcf5b158de55",
    "title": "What is the purpose of React Router?",
    "slug": "what-is-the-purpose-of-react-router",
    "postBody": "`Those who need a client-side router, need it for state management. Say you have server-rendered pages, but with some client-side widgets - e.g. a calendar, set of filters or collapsed or open sidebar. Router helps you initialize these components of the page in the exact state you want them. Granted, you could do most of it and all of the use cases I've named on the server, too. But it's usually a lot easier to handle these on the client. You might render it faster on the server, but sometimes, especially when doing partial page updates, it's cheaper and faster to handle that client-side.`",
    "postCategory": "React Router",
    "author": "Hasibul Hasan",
    "readTime": 1,
    "image": "https://reactrouter.com/ogimage.png",
    "publishDate": "11-Oct-2022"
  }, {
    "id": "2b607ebb-edc5-4496-a0fc-6ec4bb1927ca",
    "title": "How React Context API Works?",
    "slug": "how-react-context-api-works",
    "postBody": "Context is designed to share data that can be considered “global” for a tree of React Components. It sits next to React to props and state. In other words, Context provides a way to pass data through the component tree without having to pass props down manually at every level. In a short word I can say that, React Context provides a way to pass data through the component tree without having to pass props down manually at every level. In some sense, it simulates “Global” data in React component Tree.",
    "postCategory": "React Hook",
    "author": "Hasibul Hasan",
    "readTime": 3,
    "image": "https://www.loginradius.com/blog/static/157af7ff069ab273224b4718433d9790/03979/title-image.png",
    "publishDate": "11-Oct-2022"
  }, {
    "id": "1ea02a7a-83a8-4567-8085-c6e4f8e1eccb",
    "title": "What is React useRef() and How does it works?",
    "slug": "react-useref-and-how-does-it-works",
    "postBody": "The useRef hook may not be as popular as other hooks such as useState, useEffect and useReducer. Due to this, it may not be clear what is the purpose of this hook. Nonetheless, useRef hook can be very useful in certain situations. The ref, in useRef, is a shorthand for “reference”. What this hook does is it allows you to store data, and persist them across renders. What's even more interesting and important, this hook does this without causing the component to re-render. This means that when you update the value stored by useRef, React will not re-render your component. The most common use case for the useRef hook is to store references to DOM nodes and React components. This then allows you to access these nodes directly and work with them as you need. This is similar to using JavaScript querySelector() method to find DOM node and storing the node in a variable.",
    "postCategory": "React Hook",
    "author": "Hasibul Hasan",
    "readTime": 3,
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnwi8ehe64zysba5y195.png",
    "publishDate": "11-Oct-2022"
  }, {
    "id": "9b5d8077-abf7-40ce-a43c-810431d117ec",
    "title": "LocalStorage, useState (), useEffect() এর ছোট্ট গল্প",
    "slug": "localstorage-useeffect-usestate-short-stories",
    "postBody": "আমদের অনেকেরই লোকাল স্টোরেজ, useState (), useEffect() এগুলো নিয়ে প্রশ্ন! একদম সহজ ভাবে চিন্তা করলে আমার মনে হয় এই সমস্যা গুলো হবে না।  আমি তেমন জানাশোনা মানুষ নই, তাই আমার ভুল হতেই পারে এবং এটিই স্বাভাবিক। আমি শুধু আমার পার্সপেক্টিভ থেকে বোঝানোর চেষ্টা করছি। ভুল হলে ধরিয়ে দিবেন আশা করছি। চলুন একসাথে চিন্তা করি, কিছুক্ষণের জন্য ভুলে যান আপনি মাইলস্টোন ৮ করেছেন অর্থাৎ আপনি ভুলে যান যে আপনি react জানেন। এখন তাহলে আমরা react কি জিনিস সেটা জানি না। Pure JavaScript আমরা জানি এবং pure JavaScript এ আমরা অনেক ব্রডলি ভাবে localstorage ব্যাবহার করেছিলাম. মনে পড়ছে কি? যদি না মনে পরে তাহলে আগের মাইলস্টোন টা নিয়ে একটু চিন্তা করুন। আমরা একটা ফাংশন লিখতাম, যার মধ্যে localstorage এর কাজ করতাম। এবং সেই ফাংশন টাকে আমরা বিভিন্ন onclick হ্যান্ডেলার এর সাথে যুক্ত করে কাজ করতাম। তাই নয় কি? এটুকু পর্যন্ত বুঝতে পেরেছেন কিনা দেখুন তো একবার। যদি আপনার উত্তর হ্যা হয় তাহলে পরের অংশ পড়ুন, আর উত্তর না হলে আবার একটু এই অংশটুকু পড়ুন তাও না হলে আগের মাইলস্টোন এর কোড গুলো একটু দেখুন। আগের মাইলস্টোন বলতে শুধু 7 নয়, অন্যগুলো (যেগুলো localstorage ছিল) ওকে, তাহলে এই অংশে যেহেতু এসেই পড়েছেন তার অর্থ আপনি আগের অংশটুকু বুঝতে পেরেছেন। অর্থাৎ ভ্যানিলা জাভাস্ক্রিপ্ট এ আপনার লোকাল স্টোরেজ নিয়ে কোনো সমস্যা নেই।  এবার তাহলে চলুন আমরা react এ ঢুকি। React এর কিছুই জানি না তেমন আমরা (ধরে নিন)। শুধু জানি কিভাবে ডাটা এক কম্পোনেন্ট থেকে অন্য কম্পোনেন্টে পাঠাতে হয় এবং কিভাবে আগের কম্পোনেন্ট থেকে পাঠানো ডাটা রিসিভ করতে হয়। এটুকু তো আমরা জানি নাকি? যদি এটুকুও না জেনে থাকি তবে একদম শুরুর দিকের ভিডিও দেখতে উৎসাহিত করছি।  এরপর পরের অংশ পড়ুন। তাহলে আমরা জানি যে কিভাবে ডাটা পাঠাতে হয় এবং সেটাকে রিসিভ করতে হয় (props). এইযে ডাটা পাঠানোর যেই ব্যাপার সেখানে কিন্তু আমরা যেকোনো ডাটা পাঠাতে পারি। যেমন ধরুন স্ট্রিং, নম্বর, বুলিয়ান, অ্যারে, অবজেক্ট এমন কি ফাংশন কেউ। তাহলে আমরা এখন পর্যন্ত বুঝতে পারলাম props এর মাধ্যমে যেকোনো ডাটা পাঠানো যায় অন্য কম্পোনেন্টের মধ্যে। তাহলে এবার আরেকটু সহজ করে একদম শুরুর অংশে আমরা যে ভ্যানিলা JavaScript এর মধ্যে ফাংশন লিখতাম localstorage এর জন্য সেই ফাংশন তাই যদি আমরা মাদার কম্পোনেন্টের (যেই কম্পোনেন্ট থেকে ডাটা পাঠাবো) মধ্যে লিখে ফেলি এবং এই ফাংশন কে props এর মাধ্যমে child কম্পোনেন্ট এ পাঠিয়ে দেই তাহলেই কিন্তু আমরা আগের মত করে onclick এর মধ্যে এই ফাংশন কে হ্যান্ডেলার হিসেবে ব্যাবহার করতে পারছি। বুঝতে পারেন নি তাই তো? ভ্যানিলা JavaScript এ আমরা একটি onclick হ্যান্ডেলার ব্যাবহার করতাম না? হোক সেটা বাটন অথবা যেকোনো এলিমেন্ট। সেই একই ভাবে child কম্পোনেন্ট এর মধ্যেও আমরা সেটাই করবো। শুধু ফাংশন টা থাকবে মাদার কম্পোনেন্ট এর মধ্যে। যেটা আমরা child কম্পোনেন্ট এর মধ্যে props থেকে পাবো। এইতো হয়ে গেলো আপনার হ্যান্ডেলার ব্যাবহারের কাজ। এই পর্যন্ত যদি বুঝে থাকেন তাহলে পরের অংশ পড়ুন, না বুঝলে এই অংশটি আবার পড়ার চেষ্টা করুন। তবুও না বুঝলে কোন জিনিসটি বোঝা যায়নি জানান। উপরের অংশ বুঝে গেছেন জন্যই এই অংশ তে এসেছেন। তাহেল চলুন এবার আমরা আরেকটু ডিপে যাই। উপরের অংশ যদি আপনি সত্যিই বুঝে থাকেন তাহলে আপনি কিন্তু খুব সহজেই লোকাল স্টোরেজ এর মধ্যে LocalStorage.setItem() এর মাধ্যমে ডাটা রাখতে পারবেন এখন। এবার তাহলে চলুন একটু useState()  নিয়ে ধারণা নেয়া যাক। State অর্থ হচ্ছে 'অবস্থা'। কোনো কিছুর অবস্থা বোঝাতে আমরা এটা ব্যাবহার করবো। এটি একটু কঠিন ভাষা হয়ে গেলো। আরেকটু সহজ ভাবে ভাবা যাক। ধরুন, আপনি গাছ পছন্দ করেন। আপনার রুমের মধ্যে গাছ আছে অনেকগুলো (কতগুলো?)। এখন এই গাছের সংখ্যা (গাছ কেমন আছে সেটাও হতে পারে তবে সেটা পরে বলছি) আপনার মনে থাকে না। তাই আপনি একটি জায়গায় লিখে রাখলেন যে আপনার গাছ আছে ১০ টি (ইনিশিয়াল ভ্যালু)। এখন তাহলে কিন্তু আপনার গাছের অবস্থা (এই ক্ষেত্রে নাম্বার) বলতে পারবেন। সেটা হচ্ছে ১০। এবার ধরুন আপনি গেলেন বাইরে ঘুরতে। রাস্তার পাশে ৩ টি গাছ দেখে আপনার ভালো লেগে গেলো কিনে নিয়ে এলেন বাসায়। বাসায় অন্যগাছ গুলোর সঙ্গে এগুলোও রেখে দিলেন তাহলে আপনার গাছের বর্তমান অবস্থা কি? আগের ১০ এবং নতুন ৩। অর্থাৎ গাছের বর্তমান অবস্থা হচ্ছে ১০+৩=১৩ (ইনিশিয়াল ভ্যালু + নতুন ভ্যালু)। এই উদাহরণ এর মাধ্যমে state বুঝি এবার। আগে একটি state লিখি নেই আমরা। const [trees, setTrees] = useState(10); উপরের state টা না বুঝলেও সমস্যা নেই। তবে এটুকু আমাদের ধারণা আছে যে কিভাবে এটি ডিক্লেয়ার করতে হয়। তো উদাহরণ এ আমাদের ইনিশিয়াল ভ্যালু কত ছিল? অর্থাৎ আমাদের সেই রুমে গাছের সংখ্যা কত ছিল? ১০ তাই না?  যেহেতু আমরা গাছ গণনা শুরু করেছি ১০ টা থাকা অবস্থায় (স্টেট অর্থ অবস্থা) তাই আমরা আমাদের ইনিশিয়াল ভ্যালু ১০ বতলেছি। যেটা আমরা useState(10) এর পেটের মধ্যে দিয়ে দিসি। এখানে দিয়ে দেয়ার অর্থ হচ্ছে বাম পাশে আমাদের যেই trees নামের ভ্যারিয়েবল (বলা যায়) সেটার মান বসিয়ে দিলাম ১০। এটুকু বুঝে ফেললাম আমরা। তাহলে এবার পরের ঘটনা টা দেখি। নতুন ৩ টি গাছ কিনে এনে রুমে রাখায় আমাদের গাছের অবস্থা (state) পরিবর্তন হয়েছে। অর্থাৎ 10+3= 13 হয়েছে।  তাহলে এটাও তো আমদের সেই কাগজে লিখতে হবে সেই জন্য আমরা trees কে নতুন ভ্যালু দিবো। এই জন্য আমরা কল করে থাকি setTrees কে, যে তোমার অবস্থা পরিবর্তন হয়েছে। এবং সেটি এরকম setTrees(trees + newValue) অর্থাৎ setTrees(10 + 3); এটুকু যদি বুঝতে পারি তাহলে আশা করছি useState() পুরোটাই বুঝে ফেলেছি আমরা। তবুও কোথাও না বুঝলে বলবেন। এবার আসি  useEffect()। useEffect() সাধারণ ভাবে আমরা ব্যাবহার করি এমন কোনো কাজ করতে যেটি আমাদের কোডের মধ্যে নেই। যেমন: api, localstorage ডাটা ইত্যাদি। (কোডের মধ্যেও এর ব্যাবহার রয়েছে, যেমনঃ রিরেন্ডারিং, ডম আপডেট ইত্যাদি) আমাদের ঘরের মধ্যে ছিল না তাই না? (অর্থাৎ কোডের মধ্যে নেই) তাহলে এইযে বাইরে থেকে 3টা গাছ নিয়ে আসতে কাউকে তো সেখানে যেতে হয়েছে সেই মানুষ টাই হচ্ছে useEffect()। এবং এইযে গাছ গুলো আনার পর খাতায় নতুন অবস্থা (state) লিখে রাখলাম অর্থাৎ নতুন সংখ্যা কে যেটা আমরা সেই মানুষের মাধ্যমে এনেছি (useEffect) সেই সংখ্যা কে আমাদের আগের সংখ্যার জায়গায় রাখলাম setTrees দিয়ে (useEffect করেছেন তাই এটি useEffect এর নিজের কাজ)। এইতো তাহলে সেই গাছ আনার মানুষের কিন্তু কাজ শেষ। অর্থাৎ useEffect() এবার ক্লোজ হতে পারে! আর আমাদের বোঝাও কিন্তু  শেষ। আমরাও তাহলে ক্লোজ হতে পারি। যেহেতু আমি নতুন এবং তেমন ভালো জ্ঞান নেই তাই আমার লেখা এবং কনসেপ্ট এর মধ্যে ভুল থাকা টা সাভাবিক। এমন কোনো ভুল আপনার চোখে পড়লে ধরিয়ে দিবেন আশা করছি। এত সময় নিয়ে কষ্ট করে পড়ার জন্য আপনাকে অসংখ্য ধন্যবাদ। আপনার উপকারে আসতে পারলেই আমাদের সকলের মঙ্গল। দোয়া রাখবেন। আল্লাহ হাফেজ ❤️",
    "postCategory": "React Hook",
    "author": "Hasibul Hasan",
    "readTime": 10,
    "image": "https://kramarenko.com.ua/api/files/63582.png",
    "publishDate": "11-Oct-2022"
  }, {
    "id": "6ef19359-bd04-4e70-b891-28bb309fc46f",
    "title": "useEffect() ডিপেন্ডেন্সি নিয়ে মাথা ঘুরাচ্ছে?",
    "slug": "know-about-useeffect-dependency",
    "postBody": "আমাদের যাদের useEffect() dependency নিয়ে সমস্যা আছে আজকে চলুন একটু অন্যভাবে এই জিনিসটা নিয়ে ভাবার চেষ্টা করি। প্রথমেই বলে রাখি যেহেতু আমিও নতুন তাই আমার লেখায় এবং আমার কনসেপ্ট এ ভুল থাকাটাই স্বাভাবিক। তাই কোন ভুল চখে পরলে আমাকে ধরিয়ে দিবেন। USEEFFECT() - ৩ রকম ভাবে ডিক্লেয়ার করা যায়। প্রথমতঃ কোন ডিপেন্ডেন্সি না দিয়ে দ্বিতীয়তঃ ডিপেন্ডেন্সি ব্লাঙ্ক রেখে অর্থাৎ ব্ল্যাঙ্ক অ্যারে অথবা ফাঁকা অ্যারে দিয়ে এবং তৃতীয়তঃ ডিপেন্ডেন্সি দিয়ে। এগুলো এখন না বুঝলেও চলবে, কিছুক্ষণের মধ্যে এগুলো নিয়ে আবার বলা হবে. এবার চলুন একটি ঘটনা দিয়ে শুরু করা যাক। প্রথম ঘটনা: মনে করুন আপনার বাড়িটি একটি ডিজিটাল বাড়ি। যেখানে আপনার সবকিছু রিমোট কন্ট্রোল, ভয়েস কন্ট্রোল এমন আর কি। এই বাসাতে একটি স্পিকার সেট করা আছে। যে স্পিকারটার কাজ হচ্ছে বাসার মধ্যে যে কোন কিছুর পরিবর্তন ঘটলে অর্থাৎ যেকোনো কিছুর অবস্থান পরিবর্তন ঘটলে এই স্পিকারটা বলে 'Done ✅'। এখন এই পরিবর্তনটা হতে পারে: কেউ রুমে ঢুকলো, হতে পারে কেউ বাইরে চলে গেল, হতে পারে কোন একটা গাছ উপর থেকে পড়ে গেল, হতে পারে কোন একটা বিড়াল দৌড় দিল। এক কথায় আপনার বাসার মধ্যে যদি কোন চেঞ্জ হয় বা পরিবর্তন ঘটে অথবা কোনো কিছুর অবস্থার (state) পরিবর্তন ঘটে তাহলে সেই স্পিকারটা বলে 'Done ✅'। এবার এই ঘটনাটা উপলব্ধি করে আমরা প্রথম ব্যাপারটাকে বোঝার চেষ্টা করি। প্রথম ঘটনায় স্পিকারটার 'Done ✅' বলা কোন ইন্ডিভিজুয়াল কাজের উপর নির্ভর করছে না। এটি সমগ্র বাসার মধ্যে যে কোন কোন চেঞ্জের উপর ডিপেন্ড করছে অর্থাৎ যে কোন কিছুর অবস্থা পরিবর্তন হলেই এটি বলবে 'Done ✅', কোন ইন্ডিভিজুয়াল জিনিসের উপর ডিপেন্ড করবে না। এরকম যদি কোনো ঘটনা আমাদের কোডের মধ্যে হয়ে থাকে। অর্থাৎ আমাদের কোডের মধ্যে যেকোনো পরিবর্তন বা অবস্থার পরিবর্তন ঘটলেই আমাদের কোন একটি ফাংশনকে (useEffect এর অ্যানোনিমাস ফাংশন) রান করার প্রয়োজন প্রয়োজন হয় তাহলে সেই ক্ষেত্রে আমাদের কোনো ডিপেন্ডেন্সি থাকবে না। অর্থাৎ কোনো ইন্ডিভিজুয়াল জিনিসের উপর ডিপেন্ড করবে না। সেই ক্ষেত্রে আমরা কোনো ডিপেন্ডেন্সি দিবো না। কোড টা হবে এরকম। useEffect(()=> {console.log('Done ✅'):}); (Dependency Parameter থাকবে না)। দ্বিতীয় ঘটনা: ধরুন আপনার ক্লাসের মধ্যে ৬০ জন শিক্ষার্থী রয়েছে। আপনি একটি অনুষ্ঠান করার জন্য সকলের ডাটা চাইলেন। ৬০ জন মানুষই তাদের ডাটা একটি ফরম এর মধ্যে ফিলাপ করে রেখে দিল। এখন আপনি আছেন এক জায়গায় ওই ডাটা গুলা রয়েছে অন্য জায়গায়। তাহলে এই ডেটা গুলো তো আপনাকে আনতে হবে। এর জন্য আপনি একজনকে পাঠিয়ে দিলেন যে যেটা গুলো নিয়ে আসো। আপনি যেই মানুষটাকে পাঠালেন, সে কি করল একেবারে ৬০ জনের ডাটা ফর্মটা নিয়ে আপনার কাছে এসে দিয়ে দিল। তাহলে সেই লোকের কাজ শেষ। সেই লোক চলে গেল। এখন যেহেতু ষাট জনের ডাটাই আপনি পেয়ে গিয়েছেন তাই সেই ডেটা যে এনে দিল সেই লোকের কিন্তু আপনার আর দরকার নাই অর্থাৎ সেই লোককে আপনার একবারই প্রয়োজন হয়েছে। উপরের এই ঘটনার মতো যদি আমাদের কোডের মধ্যেও এমন কোনো কাজ করানোর প্রয়োজন পরে যেটা আমাদের একবারই দরকার হবে। যেমন কোন এপিআই থেকে ডেটা লোড করা। এপিআই থেকে ডাটা লোড করার পরে আমার কিন্তু আর ডাটা লোড করার প্রয়োজন নেই কারণ আমি ইতিমধ্যে সব ডাটা পেয়ে গেছি। সেই ক্ষেত্রে আমরা useEffect() এর 2nd Parameter হিসেবে একটি ব্লাঙ্ক অ্যারে দিব। যেটার অর্থ হচ্ছে এটি একবার রান হবে। কোড টি দেখতে নিচের মত হবে: useEffect(()=> {console.log('Welcome to our website 💜'):}, []); (Dependency Parameter হিসেবে [] থাকবে)। তৃতীয় ঘটনা: আপনার সেই ডিজিটাল বাসায় একটি লাইট আছে। সেই লাইটটি তখনই জ্বলে যখন রুমের মধ্যে কোন একটি মানুষ প্রবেশ করে। মানুষ প্রবেশ না করলে কিন্তু সেই লাইটটি জ্বলে না। অর্থাৎ এই ক্ষেত্রে লাইট টি জ্বলার সঙ্গে একটি সম্পর্ক রয়েছে রুমের মধ্যে মানুষ ঢোকার। লাইটটি কেবলমাত্র তখনই জ্বলবে যখন রুমের মধ্যে মানুষ ঢুকবে। উপরের এই ঘটনার মতো যদি আমাদের কোডের মধ্যেও এরকম কোন কিছুর দরকার হয়, যে কোন একটা ইন্ডিভিজুয়াল (অথবা একাধিক) জিনিসের অবস্থার (state) পরিবর্তন হলেই শুধুমাত্র আমাদের একটি ফাংশন রান করবে। ই ক্ষেত্রে আমরা useEffect() এর 2nd Parameter হিসেবে একটি parameter অ্যারে এর মধ্যে দিব। ড টি দেখতে নিচের মত হবে: seEffect(() => {console.log('Human enter');}, [isManComing]); (Dependency Parameter হিসেবে [isManComing] থাকবে)। খুব সাজানো লেখা না এটা। একটু চেষ্টা করেছি মাত্র। ধন্যবাদ ❤",
    "postCategory": "React Hook",
    "author": "Hasibul Hasan",
    "readTime": 9,
    "image": "https://blog.alexdevero.com/wp-content/uploads/2021/05/03-05-21-react-useeffect-hook-made-simple-blog.jpg",
    "publishDate": "11-Oct-2022"
  }, {
    "id": "6044db5c-b2ff-4be5-aa62-f5cb2ed1cc38",
    "title": "useState() কোথায় ডিক্লেয়ার করবো?",
    "slug": "where-should-i-declare-usestate",
    "postBody": "আপনার যদি useState() কোথায় ডিক্লেয়ার করবো বুঝতে সমস্যা হয় তাহলে নিচের প্রসেস টা ভাবতে/করতে পারেন। আপনার কম্পোনেন্ট গুলো একটি খাতায় ডায়াগ্রাম দিয়ে ম্যাপ বানান অর্থাৎ প্রথমে কোন কম্পোনেন্ট আছে এরপর কোনটা মানে একটা রোড ম্যাপ এর মত। এরপর চিন্তা করুন আপনি কোন কম্পোনেন্ট থেকে ডাটা কোথায় পাঠাতে চাচ্ছেন। তাহলে 2টার মাদার কম্পোনেন্ট কে তখন ধরুন এই কাজ করতে useState() আমরা কখন ব্যাবহার করি? যখন আমাদের একটি ডাটা সংরক্ষণ এর প্রয়োজন পড়ে তখন। সেটি যেকোনো ডাটা হতে পারে, যেমন: বুলিয়ান, নাম্বার, স্ট্রিং, অ্যারে, অবজেক্ট ইত্যাদি। এটি ব্যবহারের মাধ্যমে আমরা আমাদের কোড অনেক ছোট এবং পাওয়ারফুল করে ফেলতে পারতেছি। অন্যদিকে useEffect() আমরা ব্যাবহার করি বাইরের কোনো কাজ করতে (যেটা আপনার কোড এর মধ্যে নেই। যেমন: লোকাল স্টোরেজ, api)। এটি মাধ্যমে আমরা যখন কোনো ডাটা লোড করি তখন সেই ডাটা কে স্টোর করতে আবার আমরা useState() ব্যাবহার করি সেটা স্টোর করতে। ধন্যবাদ 💜",
    "postCategory": "React Hook",
    "author": "Hasibul Hasan",
    "readTime": 4,
    "image": "https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2020/06/3b8dff57f6.jpg",
    "publishDate": "11-Oct-2022"
  }]